apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "$extBuildDir/common.gradle"
//美团多渠道打包
apply plugin: 'walle'

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}
android {
    defaultConfig {
        applicationId buildCfg.appId
        versionCode buildCfg.appVersionCode
        versionName buildCfg.appVersionName

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    sourceSets {
        main {
            java.srcDirs += file("src/main/kotlin")
        }
    }
    resourcePrefix "app_"
    signingConfigs {
        release {
            storeFile signCfg.storeFile
            storePassword signCfg.password
            keyAlias signCfg.keyAlias
            keyPassword signCfg.keyPassword
//            v1SigningEnabled true
//            v2SigningEnabled false
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def addition = businessCfg.testServer ? "_testServer" : "_formalServer"
            outputFileName = "${variant.applicationId}-${variant.buildType.name}${addition}_v${variant.versionName}_vc${variant.versionCode}_svn${revision}.apk"
            assemble.doLast {
                def outputProperties = new Properties()
                outputProperties.setProperty('PROJECT_NAME', project.name)
                outputProperties.setProperty('APPLICATION_ID', variant.applicationId)
                outputProperties.setProperty('BUILD_TYPE', variant.buildType.name)
                outputProperties.setProperty('FILE_NAME', output.outputFile.name)
                outputProperties.setProperty('FILE_SIZE', formatFileSize(output.outputFile.size()) as String)
                outputProperties.setProperty('VERSION_CODE', variant.versionCode as String)
                outputProperties.setProperty('VERSION_NAME', variant.versionName)
                outputProperties.setProperty('REVISION', revision as String)
                outputProperties.setProperty('DATE', buildDate as String)

                def outputPropertiesFile = new File(output.outputFile.parent, 'output.properties')

                println "Printing apk description to [" + outputPropertiesFile.absolutePath + "]"

                outputProperties.store(new FileOutputStream(outputPropertiesFile), null)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.google.android.material:material:1.0.0'
    implementation project(path: ':base')
    implementation project(path: ':module-yw:main')
    implementation project(path: ':libraries:util')

    //美团多渠道打包
    implementation 'com.meituan.android.walle:library:1.1.7'
}
